/*
MIT License

Copyright (c) 2025 Первый Бит

Данная лицензия разрешает использование, копирование, изменение, слияние, публикацию, распространение,
лицензирование и/или продажу копий программного обеспечения при соблюдении следующих условий:

В вышеуказанном уведомлении об авторских правах и данном уведомлении о разрешении должны быть включены все копии
или значимые части программного обеспечения.

ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ "КАК ЕСТЬ", БЕЗ ГАРАНТИЙ ЛЮБОГО РОДА, ЯВНЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ,
ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ, ГАРАНТИЯМИ КОММЕРЧЕСКОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ДЛЯ ОПРЕДЕЛЕННОЙ ЦЕЛИ И
НЕНАРУШЕНИЯ ПРАВ. НИ В КОЕМ СЛУЧАЕ АВТОРЫ ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ ПО ИСКАМ,
УСЛОВИЯМ, ДАМГЕ или другим обязательствам, возникающим из, или в связи с использованием, или иным образом
связанным с данным программным обеспечением.
*/

package middleware

import tele "gopkg.in/telebot.v3"

// AutoRespond возвращает middleware-функцию, которая автоматически отвечает на callback-запросы.
// Это необходимо для того, чтобы Telegram не показывал пользователю сообщение о том, что запрос не был обработан,
// что помогает избежать "зависания" интерфейса в Telegram-клиентах.
//
// Функция работает следующим образом:
//  1. Проверяется, является ли входящее обновление callback-запросом.
//  2. Если да, то после выполнения следующего обработчика автоматически вызывается метод Respond()
//     для отправки ответа на callback-запрос.
//  3. Если обновление не является callback-запросом, middleware ничего не делает.
func AutoRespond() tele.MiddlewareFunc {
	return func(next tele.HandlerFunc) tele.HandlerFunc {
		return func(c tele.Context) error {
			// Если обновление является callback-запросом, откладываем вызов метода Respond(),
			// чтобы автоматически отправить ответ после выполнения следующего обработчика.
			if c.Callback() != nil {
				defer c.Respond()
			}
			// Передаем управление следующему обработчику в цепочке.
			return next(c)
		}
	}
}
