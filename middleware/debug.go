/*
MIT License

Copyright (c) 2025 Первый Бит

Данная лицензия разрешает использование, копирование, изменение, слияние, публикацию, распространение,
лицензирование и/или продажу копий программного обеспечения при соблюдении следующих условий:

В вышеуказанном уведомлении об авторских правах и данном уведомлении о разрешении должны быть включены все копии
или значимые части программного обеспечения.

ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ "КАК ЕСТЬ", БЕЗ ГАРАНТИЙ ЛЮБОГО РОДА, ЯВНЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ,
ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ, ГАРАНТИЯМИ КОММЕРЧЕСКОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ДЛЯ ОПРЕДЕЛЕННОЙ ЦЕЛИ И
НЕНАРУШЕНИЯ ПРАВ. НИ В КОЕМ СЛУЧАЕ АВТОРЫ ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ ПО ИСКАМ,
УСЛОВИЯМ, ДАМГЕ или другим обязательствам, возникающим из, или в связи с использованием, или иным образом
связанным с данным программным обеспечением.
*/

package middleware

import (
	"fmt"

	"github.com/IT-Nick/database"
	"gopkg.in/telebot.v3"
)

// DebugUserActions возвращает middleware, которое при включённом режиме отладки отправляет пользователю
// отладочное сообщение, содержащее информацию о пользователе: имя, ID, роль, текущее состояние и описание действия.
// Это может быть полезно для отслеживания и диагностики поведения пользователей во время разработки или отладки.
func DebugUserActions(enabled bool) telebot.MiddlewareFunc {
	return func(next telebot.HandlerFunc) telebot.HandlerFunc {
		return func(c telebot.Context) error {
			// Вызываем следующий обработчик и сохраняем его ошибку.
			err := next(c)
			// Если режим отладки включен, формируем отладочное сообщение.
			if enabled {
				user := c.Sender()
				// Инициализируем переменные для хранения роли и состояния пользователя.
				role, stateStr := "", ""
				if database.GlobalStore != nil {
					if us, ok := database.GlobalStore.Get(user.ID); ok {
						role = us.Role
						stateStr = us.State
					}
				}
				// Определяем тип действия пользователя (текстовое сообщение, callback или неизвестное действие).
				var action string
				if msg := c.Message(); msg != nil {
					action = "Message: " + msg.Text
				} else if cb := c.Callback(); cb != nil {
					action = "Callback: " + cb.Data
				} else {
					action = "Unknown action"
				}
				// Формируем строку отладочного сообщения.
				debugMsg := fmt.Sprintf("DEBUG: User: %s (ID: %d), Role: %s, State: %s, Action: %s",
					user.FirstName, user.ID, role, stateStr, action)
				// Отправляем отладочное сообщение в отдельной горутине, чтобы не блокировать основное выполнение.
				go c.Bot().Send(user, debugMsg)
			}
			// Возвращаем результат выполнения следующего обработчика.
			return err
		}
	}
}
